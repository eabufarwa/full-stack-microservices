openapi: 3.0.3
info:
  title: Product Service API
  version: 1.0.0
  description: |
    CRUD API for managing products.
    
    Error envelope is consistent across services: { code, message, details? }.
servers:
  - url: /
tags:
  - name: products
    description: Product resources
paths:
  /api/v1/products:
    get:
      tags: [products]
      summary: List products
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          required: false
          description: Page number (1-based)
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
          required: false
          description: Page size (default 50)
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags: [products]
      summary: Create product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
            examples:
              example:
                value:
                  name: "Keyboard"
                  description: "Mechanical switch keyboard"
                  price: 79.99
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/products/{id}:
    get:
      tags: [products]
      summary: Get product by id
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [products]
      summary: Update product
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [products]
      summary: Delete product
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/NotFound'

components:
  parameters:
    PathId:
      in: path
      name: id
      required: true
      schema:
        type: string
        format: uuid
  responses:
    BadRequest:
      description: Validation or client error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    ErrorResponse:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: One or more validation errors occurred
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
    Product:
      type: object
      required: [id, name, price, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 120
        description:
          type: string
          nullable: true
        price:
          type: number
          format: double
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateProductRequest:
      type: object
      required: [name, price]
      properties:
        name:
          type: string
          maxLength: 120
        description:
          type: string
        price:
          type: number
          format: double
          minimum: 0
    UpdateProductRequest:
      type: object
      description: Partial update; all fields optional
      properties:
        name:
          type: string
          maxLength: 120
        description:
          type: string
        price:
          type: number
          format: double
          minimum: 0

